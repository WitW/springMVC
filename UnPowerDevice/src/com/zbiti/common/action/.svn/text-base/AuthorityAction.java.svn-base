package com.zbiti.common.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.zbiti.common.model.ActionInfo;
import com.zbiti.common.model.DwzReturnObject;
import com.zbiti.common.model.RoleInfo;
import com.zbiti.common.model.table.Page;
import com.zbiti.common.model.tree.TreeNode;
import com.zbiti.common.service.AuthorityService;
import com.zbiti.mvc.android.model.StaffInfo;
import com.zbiti.mvc.android.service.UserInfoService;
import com.zbiti.util.StaticPro;
import com.zbiti.util.Util;

/**
 * 
 * 权限管理action
 * @author dlt
 *
 */
@Controller
@RequestMapping("/authority")
@SuppressWarnings("all")
public class AuthorityAction {
	
	protected final Log logger = LogFactory.getLog(this.getClass());
	@Autowired
	private AuthorityService authorityServiceImpl;
	
	@Autowired
	private UserInfoService userInfoServiceImpl;
	
	/**
	 * 角色信息查询，分页
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping("/listRolesInfo")
	public String listRolesInfo(HttpServletRequest request,HttpServletResponse response,ModelMap model){
		
		Page page = new Page();
		
		String currentPage = (String)request.getParameter("currentPage");
		
		//设置查询的参数
		Map<String,String> map = new HashMap<String,String>();
		
		if(request.getParameter("roleName") != null){
			map.put("roleName", (String)request.getParameter("roleName"));
			
			model.put("roleName", (String)request.getParameter("roleName"));
		}
			
		
		if(request.getParameter("pageNum") != null){
			String pageNum = (String)request.getParameter("pageNum");
			page.setCurrentPage(Integer.parseInt(pageNum));
		}
		if(request.getParameter("numPerPage") !=null){
			String showCount = (String)request.getParameter("numPerPage");
			page.setShowCount(Integer.parseInt(showCount));
		}
		
		
		List<RoleInfo>  result = authorityServiceImpl.listRolesInfo(map,page);
		
		model.put("page", page);
		model.put("result", result);
		return "listRoles";
	}
	
	/**
	 * 用户信息查询,分页
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping("/staffInfolistPage")
	public String staffInfolistPage(HttpServletRequest request,HttpServletResponse response,ModelMap model){
		
		Page page = new Page();
		
		HttpSession session = request.getSession();
		Map<String,String> map = new HashMap<String,String>();
	
		if(request.getParameter("staffNbr") != null){
			map.put("staffNbr", (String)request.getParameter("staffNbr"));
			
			model.put("staffNbr", (String)request.getParameter("staffNbr"));
		}
		
		if(request.getParameter("password") != null){
			map.put("password", (String)request.getParameter("password"));
			
			model.put("password", (String)request.getParameter("password"));
		}
		
		if(request.getParameter("staffName") != null){
			map.put("staffName", (String)request.getParameter("staffName"));
			
			model.put("staffName", (String)request.getParameter("staffName"));
		}
		
		if(request.getParameter("org") != null){
			map.put("org", (String)request.getParameter("org"));
			model.put("org", (String)request.getParameter("org"));
		}
		
		if(request.getParameter("areaName") != null){
			map.put("areaName", (String)request.getParameter("areaName"));
			model.put("areaName", (String)request.getParameter("areaName"));
		}
		
		if(request.getParameter("pageNum") != null&&request.getParameter("pageNum") != ""){
			String pageNum = (String)request.getParameter("pageNum");
			page.setCurrentPage(Integer.parseInt(pageNum));
		}
		if(request.getParameter("numPerPage") !=null&& request.getParameter("numPerPage")!=""){
			String showCount = (String)request.getParameter("numPerPage");
			page.setShowCount(Integer.parseInt(showCount));
		}
		 Map<String,String> user=(Map<String, String>) session.getAttribute("userInfo");
		 map.put("areaId", Util.convertStr(user.get("AREA_ID")));
		
		List<StaffInfo> result = userInfoServiceImpl.staffInfolistPage(map, page);
		
		
		String staffNbr = (String)session.getAttribute("staffNbr");
		
		List<Map<String,String>> list = userInfoServiceImpl.getAreaInfoByStaffNbr(staffNbr,null);
		
		
		model.put("area", list);
		model.addAttribute("page", page);
		model.addAttribute("result", result);
		
		return "listUsers";
	}
	
	/**
	 * 查询所有的功能信息
	 * @param model
	 * @return
	 */
	@RequestMapping("/getAllActionInfo")
	public String getAllActionInfo(HttpServletRequest request,ModelMap model){
		
		String roleId = request.getParameter("roleId")==null?"":(String)request.getParameter("roleId");
		
		String roleValue = (String)request.getParameter("roleValue");
		
		String binStr = Integer.toBinaryString(Integer.parseInt(roleValue));
		
		char[] chVal = binStr.toCharArray();
		
		//查询功能信息
		List<ActionInfo> list = authorityServiceImpl.getAllActionInfo();
		
		List<TreeNode> trList = new ArrayList<TreeNode>();
		
		//选中的权重type
		List<String> listCheckedVal = new ArrayList<String>();
		
		for(int i = 0;i < list.size(); i++ ){
			TreeNode tn = new TreeNode();
			tn.setId(list.get(i).getActionId());
			//tn.setHref("");
			tn.setTitle(list.get(i).getActionName());
			tn.setParentNoteId("0");
			tn.setTname(list.get(i).getActionId());
			//判断是否选中
			for(int j = 0; j < chVal.length; j++){
				if(Integer.parseInt(list.get(i).getActionType()) == (chVal.length-1-j) && "1".equals(String.valueOf(chVal[j]))){
					listCheckedVal.add(list.get(i).getActionType());
					tn.setChecked(true);
					break;
				}
			}
			tn.setTvalue(list.get(i).getActionType());
			
			trList.add(tn);
		}
		TreeNode actTree = new  TreeNode(trList);
		actTree.setId("0");
		actTree.setTitle("客户端功能");
		actTree.setTname("0");
		
		model.put("actList", actTree.getLiStr());
		model.put("roleId", roleId);
		model.put("roleValue", roleValue);
		
		model.put("listCheckedVal",JSONArray.fromObject(listCheckedVal).toString());
		return "listActions";
		
	}
	
	/**
	 * 修改角色信息页面
	 * @param request
	 * @param model
	 * @param response
	 * @return
	 */
	@RequestMapping("/updateRolePage")
	public String updateRolePage(HttpServletRequest request,ModelMap model,HttpServletResponse response){
		String roleId = (String)request.getParameter("roleId");
		RoleInfo roleInfo = authorityServiceImpl.getRoleInfoById(roleId);
		
		model.put("roleId", roleId);
		model.put("roleName", roleInfo.getRoleName());
		model.put("roleValue", roleInfo.getRoleValue());
		return "updateRole";
	}
	
	/**
	 * 
	 * 修改角色的权限信息,
	 * @param request
	 * @param model
	 */
	@RequestMapping("/updateRoleInfo")
	//@ResponseBody
	public void updateRoleInfo(HttpServletRequest request,ModelMap model,HttpServletResponse response){
		String roleId = (String)request.getParameter("roleId");
		//String roleValue = (String)request.getParameter("roleValue");
		
		RoleInfo roleInfo = new RoleInfo();
		
		roleInfo.setRoleId(roleId);
		
		if(request.getParameter("roleValue") != null && !"".equals((String)request.getParameter("roleValue"))){
			roleInfo.setRoleValue((String)request.getParameter("roleValue"));
		}
		
		if(request.getParameter("serValue") != null && !"".equals((String)request.getParameter("serValue"))){
			roleInfo.setSerValue((String)request.getParameter("serValue"));
		}
		
		if(request.getParameter("roleName") != null && !"".equals((String)request.getParameter("roleName"))){
			roleInfo.setRoleName((String)request.getParameter("roleName"));
		}

		DwzReturnObject result=null;
		try{
			authorityServiceImpl.updateRoleInfo(roleInfo);
			result= new DwzReturnObject(StaticPro.STATUS_CODE_SUCCESS,null,"panel_"+StaticPro.LEFT_TREEID_ROLE,"../authority/listRolesInfo.do",StaticPro.CALLBACK_TYPE_CLOSE);
		}catch(Exception e){
			e.printStackTrace();
			result= new DwzReturnObject(StaticPro.STATUS_CODE_FAIL,null,"panel_"+StaticPro.LEFT_TREEID_ROLE,"../authority/listRolesInfo.do",StaticPro.CALLBACK_TYPE_CLOSE);
		}
		Util.sendParam(response, JSONObject.fromObject(result).toString());
	}
	
	/**
	 * 查询用户的角色信息，生成角色树
	 * @return
	 */
	@RequestMapping("/getAllRoleInfo")
	public String getAllRoleInfo(HttpServletRequest request,ModelMap model){
		
		String staffId = (String)request.getParameter("staffId");
		
		List<RoleInfo> list = authorityServiceImpl.getAllRoleInfo();
		
		//查询用户具有的角色,roleID列表
		List<String> listStaffRoles = userInfoServiceImpl.getStaffRoleInfo(staffId);
		
		List<TreeNode> trList = new ArrayList<TreeNode>();
		
		//
		List<String> listCheckedRol = new ArrayList<String>();
		
		for (int i = 0; i < list.size(); i++) {
			
			TreeNode tn = new TreeNode();
			tn.setId(list.get(i).getRoleId());
			
			tn.setTitle(list.get(i).getRoleName());
			tn.setParentNoteId("0");
			tn.setTname(list.get(i).getRoleId());
			
			tn.setTvalue(list.get(i).getRoleId());
			
			for(String str : listStaffRoles){
				if(str.equals(list.get(i).getRoleId())){
					tn.setChecked(true);
					listCheckedRol.add(list.get(i).getRoleId());
					break;
				}
			}
			
			trList.add(tn);
			
		}
		
		TreeNode actTree = new  TreeNode(trList);
		actTree.setId("0");
		actTree.setTitle("系统角色");
		actTree.setTname("0");
		
		model.put("listCheckedVal",JSONArray.fromObject(listCheckedRol).toString());
		model.put("actList", actTree.getLiStr());
		model.put("staffId", staffId);
		return "listStfRoles";
	}
	
	/**
	 * 修改用户角色信息
	 * @param request
	 * @param model
	 * @param response
	 * @return
	 */
	@RequestMapping("/updateStaffRoleInfo")
	@ResponseBody
	public void updateStaffRoleInfo(HttpServletRequest request,ModelMap model,HttpServletResponse response){
		String staffId = (String)request.getParameter("staffId");
		
		String roleJson = (String)request.getParameter("rolesId");
		
		
		Object[] rolesId=JSONArray.fromObject(roleJson).toArray();
		
		DwzReturnObject result=null;
		try{
			userInfoServiceImpl.deleteStaffRoleInfo(staffId);
			for(Object roleId: rolesId){
				
				userInfoServiceImpl.insertStaffRoleInfo(staffId, roleId.toString());
			}
			result= new DwzReturnObject(StaticPro.STATUS_CODE_SUCCESS,null,"panel_"+StaticPro.LEFT_TREEID_STAFF,"../authority/staffInfolistPage.do",StaticPro.CALLBACK_TYPE_CLOSE);
		}catch(Exception e){
			e.printStackTrace();
			result= new DwzReturnObject(StaticPro.STATUS_CODE_FAIL,null,"panel_"+StaticPro.LEFT_TREEID_STAFF,"../authority/staffInfolistPage.do",StaticPro.CALLBACK_TYPE_CLOSE);
		}
		Util.sendParam(response, JSONObject.fromObject(result).toString());
	}
	
	/**
	 * 删除角色信息
	 * @param request
	 * @param model
	 * @param response
	 */
	@RequestMapping("deleteRoleInfo")
	public void deleteRoleInfo(HttpServletRequest request,ModelMap model,HttpServletResponse response){
		String roleIds = (String)request.getParameter("roleIds");
		
		String[] roleStrArr = roleIds.split(",");
		DwzReturnObject result=null;
		try{
			for(String roleId : roleStrArr){
				
				//删除用户角色信息
				authorityServiceImpl.deleteStaffRoleInfoByRoleId(roleId);
				
				//删除角色信息
				authorityServiceImpl.deleteRoleInfo(roleId);
			}
			result= new DwzReturnObject(StaticPro.STATUS_CODE_SUCCESS,"删除成功",null,"../authority/listRolesInfo.do",StaticPro.CALLBACK_TYPE_FORWARD);
		}catch(Exception e){
			e.printStackTrace();
			result= new DwzReturnObject(StaticPro.STATUS_CODE_FAIL,"删除失败",null,"../authority/listRolesInfo.do",StaticPro.CALLBACK_TYPE_FORWARD);
		}
		Util.sendParam(response, JSONObject.fromObject(result).toString());
	}
	
	/**
	 * 页面跳转到增加角色页面
	 * @return
	 */
	@RequestMapping("addRolePage")
	public String addRolePage(ModelMap model){
		List<ActionInfo> list = authorityServiceImpl.getAllActionInfo();
		model.put("listAc", list);
		return "addRole";
	}
	
	/**
	 * 查找带回
	 * @param model
	 * @return
	 */
	@RequestMapping("bringBackAction")
	public String bringBackAction(ModelMap model){
		//查询功能信息
		List<ActionInfo> list = authorityServiceImpl.getAllActionInfo();
		model.put("listAc", list);
		return "bringBackAc";
	}
	
	/**
	 * 增加角色信息
	 * @param request
	 * @param model
	 * @param response
	 */
	@RequestMapping("addRoleInfo")
	public void addRoleInfo(HttpServletRequest request,ModelMap model,HttpServletResponse response){
		String roleName = (String)request.getParameter("roleName");
		String roleValue = "0";
		
		if(request.getParameter("roleValue") != null && !"".equals((String)request.getParameter("roleValue"))){
			roleValue = (String)request.getParameter("roleValue");
			roleValue = this.getRoleValue(roleValue);
		}
		
		RoleInfo roleInfo = new RoleInfo();
		roleInfo.setRoleName(roleName);
		roleInfo.setRoleValue(roleValue);
		roleInfo.setSerValue("0");
		
		DwzReturnObject result=null;
		try{
			Map<String, String> role = authorityServiceImpl.getRoleInfoByRoleNameInfo(roleName);
			if(role != null && role.size() > 0){
				result = new DwzReturnObject(StaticPro.STATUS_CODE_FAIL,"角色已经存在","panel_"+StaticPro.LEFT_TREEID_ROLE,"../authority/addRoleInfo.do",StaticPro.CALLBACK_TYPE_FORWARD);
			}else{
				authorityServiceImpl.insertRoleInfo(roleInfo);
				result= new DwzReturnObject(StaticPro.STATUS_CODE_SUCCESS,null,"panel_"+StaticPro.LEFT_TREEID_ROLE,"../authority/listRolesInfo.do",StaticPro.CALLBACK_TYPE_CLOSE);
			}	
		}catch(Exception e){
			e.printStackTrace();
			result= new DwzReturnObject(StaticPro.STATUS_CODE_FAIL,null,"panel_"+StaticPro.LEFT_TREEID_ROLE,"../authority/listRolesInfo.do",StaticPro.CALLBACK_TYPE_CLOSE);
		}
		Util.sendParam(response, JSONObject.fromObject(result).toString());
	}
	
	/**
	 * 跳转到增加用户信息
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping("addStaffPage")
	public String addStaffPage(HttpServletRequest request,ModelMap model){
		HttpSession session = request.getSession();
		String staffNbr = (String)session.getAttribute("staffNbr");
		
		
		List<Map<String,String>> list = userInfoServiceImpl.getAreaInfoByStaffNbr(staffNbr,null);
		
		model.put("area", list);
		return "addStaffPage";
	}
	/**
	 * 新增用户信息
	 * @param request
	 * @param model
	 * @param response
	 */
	@RequestMapping("addStaffInfo")
	public void addStaffInfo(HttpServletRequest request,ModelMap model,HttpServletResponse response){
		StaffInfo staffInfo = new StaffInfo();

		if(request.getParameter("staffNbr") != null){
			staffInfo.setStaffNbr((String)request.getParameter("staffNbr"));
		}
		
		if(request.getParameter("password") != null){
			staffInfo.setPassword((String)request.getParameter("password"));
		}
		
		
		if(request.getParameter("staffName") != null){
			staffInfo.setStaffName((String)request.getParameter("staffName"));
		}
		
		if(request.getParameter("org") != null){
			staffInfo.setOrg((String)request.getParameter("org"));
		}
		
		if(request.getParameter("areaName") != null){
			staffInfo.setAreaName((String)request.getParameter("areaName"));
		}		
		
		DwzReturnObject result=null;
		try{
			//查看用户是否存在
			Map <String,String> user = userInfoServiceImpl.getUserInfoByStaffNbr(staffInfo.getStaffNbr());
			if(user != null && user.size() > 0){
				
				result = new DwzReturnObject(StaticPro.STATUS_CODE_FAIL,"用户已经存在","panel_"+StaticPro.LEFT_TREEID_STAFF,"../authority/addStaffInfo.do",StaticPro.CALLBACK_TYPE_FORWARD);
					
			}else{
				this.userInfoServiceImpl.insertStaffInfo(staffInfo);
				result = new DwzReturnObject(StaticPro.STATUS_CODE_SUCCESS,null,"panel_"+StaticPro.LEFT_TREEID_STAFF,"../authority/staffInfolistPage.do",StaticPro.CALLBACK_TYPE_CLOSE);
			}
		}catch(Exception e){
			e.printStackTrace();
			result = new DwzReturnObject(StaticPro.STATUS_CODE_FAIL,null,"panel_"+StaticPro.LEFT_TREEID_STAFF,"../authority/staffInfolistPage.do",StaticPro.CALLBACK_TYPE_CLOSE);
		}
		
		Util.sendParam(response, JSONObject.fromObject(result).toString());
		
	}
	
	/**
	 * 删除用户信息
	 * @param request
	 * @param model
	 * @param response
	 */
	@RequestMapping("deleteStaffInfo")
	public void deleteStaffInfo(HttpServletRequest request,ModelMap model,HttpServletResponse response){
		
		String staffIds = (String)request.getParameter("staffIds");
		
		String[] staffIdArr = staffIds.split(",");

		
		DwzReturnObject result=null;
		try{
			for(String staffId : staffIdArr){
				//删除用户的角色信息
				userInfoServiceImpl.deleteStaffRoleInfo(staffId);
				//删除用户信息
				userInfoServiceImpl.deleteStaffInfoById(staffId);
			}
			result= new DwzReturnObject(StaticPro.STATUS_CODE_SUCCESS,"删除用户成功","panel_"+StaticPro.LEFT_TREEID_STAFF,"../authority/staffInfolistPage.do",StaticPro.CALLBACK_TYPE_FORWARD);
		}catch(Exception e){
			e.printStackTrace();
			result= new DwzReturnObject(StaticPro.STATUS_CODE_FAIL,"删除用户失败","panel_"+StaticPro.LEFT_TREEID_STAFF,"../authority/staffInfolistPage.do",StaticPro.CALLBACK_TYPE_FORWARD);
		}
		
		Util.sendParam(response, JSONObject.fromObject(result).toString());
	} 
	
	/**
	 * 跳转到修改用户信息页面
	 * @param request
	 * @param model
	 * @param response
	 * @return
	 */
	@RequestMapping("/updateStaffPage")
	public String updateStaffPage(HttpServletRequest request,ModelMap model,HttpServletResponse response){
		
		String staffId = (String)request.getParameter("staffId");
		StaffInfo staffInfo = userInfoServiceImpl.getStaffInfoByStaffId(staffId);
		
		List<Map<String,String>> list = userInfoServiceImpl.getAreaInfoByStaffNbr(staffInfo.getStaffNbr(),null);
		
		model.put("areaList", list);
		model.put("staff", staffInfo);
		return "updateStaffPage";
	}

	/**
	 * 修改用户信息
	 * @param request
	 * @param model
	 * @param response
	 */
	@RequestMapping("/updateStaffInfo")
	public void updateStaffInfo(HttpServletRequest request,ModelMap model,HttpServletResponse response){
		
		StaffInfo staffInfo = new StaffInfo();
		
		if(request.getParameter("staffId") != null){
			staffInfo.setStaffId((String)request.getParameter("staffId"));
		}
		if(request.getParameter("staffNbr") != null){
			staffInfo.setStaffNbr((String)request.getParameter("staffNbr"));
		}
		
		if(request.getParameter("password") != null){
			staffInfo.setPassword((String)request.getParameter("password"));
		}
		
		if(request.getParameter("staffName") != null){
			staffInfo.setStaffName((String)request.getParameter("staffName"));
		}
		
		if(request.getParameter("org") != null){
			staffInfo.setOrg((String)request.getParameter("org"));
		}
		
		if(request.getParameter("areaID") != null){
			staffInfo.setAreaName((String)request.getParameter("areaID"));
		}
		
		
		DwzReturnObject result=null;
		try{
			//查看用户是否存在
//			Map <String,String> user = userInfoServiceImpl.getUserInfoByStaffNbr(staffInfo.getStaffNbr());
//			if(user != null && user.size() > 0 && Util.convertStr(user.get("STAFF_ID")).equals(staffInfo.getStaffId())){
//				result = new DwzReturnObject(StaticPro.STATUS_CODE_FAIL,"用户已经存在","panel_"+StaticPro.LEFT_TREEID_STAFF,"../authority/addStaffInfo.do",StaticPro.CALLBACK_TYPE_FORWARD);
//					
//			}else{
				userInfoServiceImpl.updateStaffInfo(staffInfo);
				result= new DwzReturnObject(StaticPro.STATUS_CODE_SUCCESS,"修改成功","panel_"+StaticPro.LEFT_TREEID_STAFF,"../authority/staffInfolistPage.do",StaticPro.CALLBACK_TYPE_CLOSE);
			//}

		}catch(Exception e){
			e.printStackTrace();
			result= new DwzReturnObject(StaticPro.STATUS_CODE_FAIL,"修改失败","panel_"+StaticPro.LEFT_TREEID_STAFF,"../authority/staffInfolistPage.do",StaticPro.CALLBACK_TYPE_CLOSE);
		}
		
		Util.sendParam(response, JSONObject.fromObject(result).toString());
	}
	
	/**
	 * 查询所有的功能信息
	 * @param model
	 * @return
	 */
	@RequestMapping("/getAllServerActionInfo")
	public String getAllServerActionInfo(HttpServletRequest request,ModelMap model){
		
		String roleId = request.getParameter("roleId")==null?"":(String)request.getParameter("roleId");
		
		String roleValue = (String)request.getParameter("serValue");
		
		String binStr = Integer.toBinaryString(Integer.parseInt(roleValue));
		
		char[] chVal = binStr.toCharArray();
		
		//查询功能信息
		List<ActionInfo> list = authorityServiceImpl.getAllServerActionInfo();
		
		List<TreeNode> trList = new ArrayList<TreeNode>();
		
		//选中的权重type
		List<String> listCheckedVal = new ArrayList<String>();
		
		for(int i = 0;i < list.size(); i++ ){
			TreeNode tn = new TreeNode();
			tn.setId(list.get(i).getActionId());
			//tn.setHref("");
			tn.setTitle(list.get(i).getActionName());
			tn.setParentNoteId("0");
			tn.setTname(list.get(i).getActionId());
			//判断是否选中
			for(int j = 0; j < chVal.length; j++){
				if(Integer.parseInt(list.get(i).getActionType()) == (chVal.length-1-j) && "1".equals(String.valueOf(chVal[j]))){
					listCheckedVal.add(list.get(i).getActionType());
					tn.setChecked(true);
					break;
				}
			}
			tn.setTvalue(list.get(i).getActionType());
			
			trList.add(tn);
		}
		TreeNode actTree = new  TreeNode(trList);
		actTree.setId("0");
		actTree.setTitle("服务端功能");
		actTree.setTname("0");
		
		
		model.put("actList", actTree.getLiStr());
		model.put("roleId", roleId);
		model.put("serValue", roleValue);
		
		model.put("listCheckedVal",JSONArray.fromObject(listCheckedVal).toString());
		return "listServerActions";
		
	}
	
	
	
	/**
	 *获取角色权重值
	 * @param num
	 * @return
	 */
	private String getRoleValue(String num) {
		int n = Integer.parseInt(num);
		int tmp = 1;
		for (int i = 0; i < n; i++) {
			tmp = tmp * 2;
		}
		return String.valueOf(tmp);
	}

}
